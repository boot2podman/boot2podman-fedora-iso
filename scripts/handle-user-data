#!/bin/sh

LABEL=b2p-data
MAGIC="boot2podman, please format-me"
UNPARTITIONED_HD="/dev/$(lsblk | grep disk | grep ".*da" | cut -f1 -d' ')"

# Function to mount partitions
mount_partitions() {
    PARTNAME=`echo "$BOOT2PODMAN_DATA" | sed 's/.*\///'`
    echo "mount p:$PARTNAME ..."
    mkdir -p /mnt/$PARTNAME
    if ! mount $BOOT2PODMAN_DATA /mnt/$PARTNAME 2>/dev/null; then
        # for some reason, mount doesn't like to modprobe btrfs
        BOOT2PODMAN_FSTYPE=`blkid -o export $BOOT2PODMAN_DATA | grep TYPE= | cut -d= -f2`
        modprobe $BOOT2PODMAN_FSTYPE || true
        umount -f /mnt/$PARTNAME || true
        mount $BOOT2PODMAN_DATA /mnt/$PARTNAME
    fi

    # Just in case, the links will fail if not
    umount -f /var/lib/containers || true
    rm -rf /var/lib/containers /var/lib/boot2podman /opt

    # Detected a disk with a normal linux install (/var/lib/containers + more))
    if [ ! -d "/var/lib" ]; then
        mkdir -p /var/lib
    fi

    if [ -d "/etc/pki/consumer" ]; then
        rm -fr /etc/pki/consumer /etc/pki/entitlement /etc/pki/product
        mkdir -p /mnt/$PARTNAME/etc/pki/{consumer,entitlement,product}
        ln -s /mnt/$PARTNAME/etc/pki/consumer /etc/pki/consumer
        ln -s /mnt/$PARTNAME/etc/pki/entitlement /etc/pki/entitlement
        ln -s /mnt/$PARTNAME/etc/pki/product /etc/pki/product
    fi

    mkdir -p /mnt/$PARTNAME/var/lib/containers
    mkdir -p /var/lib/containers
    mount --bind /mnt/$PARTNAME/var/lib/containers /var/lib/containers
    restorecon -R /var/lib/containers

    mkdir -p /mnt/$PARTNAME/var/lib/boot2podman
    mkdir -p /var/lib/boot2podman
    mount --bind /mnt/$PARTNAME/var/lib/boot2podman /var/lib/boot2podman

    mkdir -p /mnt/$PARTNAME/opt
    ln -s /mnt/$PARTNAME/opt /opt

    # Move userdata to persistent storage
    if [ -e "/userdata.tar" ]; then
        mv /userdata.tar /var/lib/boot2podman/
    fi

    ls -l /mnt/$PARTNAME
}

# Function to partion and format the data disk
prepare_partions() {
    # Create the partition, format it and then mount it
    echo "NEW boot2podman managed disk image ($UNPARTITIONED_HD): formatting it for use"

    # Add the data partition
    (echo n; echo p; echo 1; echo ; echo ; echo w) | fdisk $UNPARTITIONED_HD
    # Let kernel re-read partition table
    partprobe
    # wait for the partition to actually exist, timeout after about 5 seconds
    timer=0
    while [ "$timer" -lt 10 -a ! -b "${UNPARTITIONED_HD}1" ]; do
        timer=$((timer + 1))
        sleep 0.5
    done

    BOOT2PODMAN_DATA=`echo "${UNPARTITIONED_HD}1"`
    mkfs.xfs -n ftype=1 -i size=2048 -L $LABEL $BOOT2PODMAN_DATA
}

# Function to extract userdata.tar containing the ssh keys into the home directory /home/tc
handle_user_data() {
    # Extract the userdata into tc user home directory
    if [ -e "/var/lib/boot2podman/userdata.tar" ]; then
        tar xf /var/lib/boot2podman/userdata.tar -C /home/tc/ > /var/log/userdata.log 2>&1
        rm -f '/home/tc/boot2podman, please format-me'
        chown -R tc:staff /home/tc/.ssh
    else
        echo "Unable to find userdata.tar"
        exit 1
    fi
}

root_ssh_access() {
    if ! [ -e "/root/.ssh" ]; then
        mkdir /root/.ssh
        chmod 700 /root/.ssh
        cp /home/tc/.ssh/authorized_keys /root/.ssh/
        chmod 600 /root/.ssh/authorized_keys
    fi
}

# This ensures that if a user builds an image as a non-root user it
# will use the attached storage rather than the RAM disk which will
# exhuast all memory
tc_podman_storage() {
    mkdir -p /home/tc/.config/containers
    cat > /home/tc/.config/containers/storage.conf << EOFS
    [storage]
    driver = "overlay"
    runroot = "/run/user/1000/containers"
    graphroot = "/var/lib/containers/tc_storage"
    [storage.options]
        size = ""
        remap-uids = ""
        remap-gids = ""
        ignore_chown_errors = ""
        remap-user = ""
        remap-group = ""
        skip_mount_home = ""
        mount_program = "/usr/bin/fuse-overlayfs"
        mountopt = ""
        [storage.options.aufs]
        mountopt = ""
        [storage.options.btrfs]
        min_space = ""
        size = ""
        [storage.options.thinpool]
        autoextend_percent = ""
        autoextend_threshold = ""
        basesize = ""
        blocksize = ""
        directlvm_device = ""
        directlvm_device_force = ""
        fs = ""
        log_level = ""
        min_free_space = ""
        mkfsarg = ""
        mountopt = ""
        size = ""
        use_deferred_deletion = ""
        use_deferred_removal = ""
        xfs_nospace_max_retries = ""
        [storage.options.overlay]
        ignore_chown_errors = ""
        mountopt = ""
        mount_program = ""
        size = ""
        skip_mount_home = ""
        [storage.options.vfs]
        ignore_chown_errors = ""
        [storage.options.zfs]
        mountopt = ""
        fsname = ""
        size = ""
EOFS
    chown -R tc:staff /home/tc/.config
    
    mkdir /var/lib/containers/tc_storage
    chown -R tc:staff /var/lib/containers/tc_storage
}

# TODO Need to make sure to have /sbin on the PATH. Is there a better way?
# http://stackoverflow.com/questions/19983710/some-commands-not-wroking-on-remote-servers-through-ssh-shell
# https://github.com/LalatenduMohanty/centos-live-iso/issues/11
echo 'PATH=$PATH:/sbin' >> /home/tc/.bashrc

# If there is a partition with `boot2podman-data` as its label we are dealing with
# an already bootstrapped podman-machine. Just make sure to mount data partition and to unpack
# userdata.tar. Remember, /home/tc is not persistent
BOOT2PODMAN_DATA=`blkid -o device -l -t LABEL=$LABEL`
if [ -n "$BOOT2PODMAN_DATA" ]; then
    mount_partitions
    handle_user_data
    root_ssh_access
    tc_podman_storage
    exit 0
fi

# Test for our magic string (it means that the disk was made by ./boot2podman init)
HEADER=`dd if=$UNPARTITIONED_HD bs=1 count=${#MAGIC} 2>/dev/null`
if [ "$HEADER" = "$MAGIC" ]; then
    # Read /userdata.tar with ssh keys and place it temporarily under /
    dd if=$UNPARTITIONED_HD of=/userdata.tar bs=1 count=4096 2>/dev/null

    prepare_partions
    mount_partitions
    handle_user_data
    root_ssh_access
    tc_podman_storage
    exit 0
fi
